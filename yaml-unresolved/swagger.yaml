openapi: 3.0.3
info:
  version: 2.6.6
  title: GLR 4 Explore
  description: API definitions for Explore and GLR integration. simplified API definition to compress size and increase reuse
  contact:
    name: John Tyndale
    email: john@greatlittlerewards.co.uk
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: carrier
    description: carrier related data 
  - name: report
    description: "all aggregated reports"
  - name: centre
    description: 'a learning centre, school or similar location'
  - name: product
    description: a clone of the shopify product data
  - name: webhook
    description: backend processing calls
  - name: store
    description: Access to the glr4s store
  - name: 'draft order'
  - name: cabinet
  - name: cart
    description: >-
      this is list of order lineitems that belong to a specific student within a
      school order
  - name: user
  - name: process
    description: 'used to indicate this is a complex process or aggregation api'
  - name: processOrder
    description: 'any tag starting with the word process implies there is complex logic. This is distinct and seprate from the base system api functions. In this case anything tagged processOrder will include some complex process interaction with other APIS eg user rewards points or a related cabinet'
  - name: container
    description: 'A generic flexible method for grouping users. A container has a single owner and many members. Containers can contain containers. Eg a learning centre is a container owned by a manager but within this there might be a tutor group of members and teachers with an owner/lead'
  - name: issuer
    description: 'the issuer of rewards. examples might be amazon for cards or GLR'
  - name: invoice
    description: "create or retrieve invoices for related draft orders"
  - name: CBCustomers
    description: 'a fullfiment customer of copper beech'
  - name: CBContracts
    description: 'a contract wiht a copper beech customer'
  - name: CBTasks
    description: 'CB related tasks'
  - name: CBMovements
    description: 'shippings related CB costs'
  - name: CBCosts
    description: 'all other cb related costs'
  - name: CBReports
    description: 'aggregations and other calculations'
  - name: CBInvoice
    description: 'all methods related to Copper Beech Invoicing'
paths:
  /cb/invoices/{invoiceId}:
    summary: 'methods for a specific cb invoice'
    parameters:
    - in: path
      name: invoiceId
      required: true
      schema:
        type: string
    get:
      tags:
        - CBInvoice
      operationId: getCBInvoiceById
      responses:
        '200':
          description: ' a single invoice object'
          content:
            application/json:
              schema:
                type: object
        '400':
          description: 'unexpected error'
    delete:
      tags:
        - CBInvoice
      operationId: deleteCBInvoiceById
      responses:
        '200':
          description: 'invoice deleted'
        '400':
          description: 'unexpected error'
  /cb/invoices:
    summary: 'all methods releated to copper Beech Invoicing'
    get:
      tags:
        - CBInvoice
      operationId: getCBInvoices
      parameters:
        - in: query
          name: month
          schema:
            type: number
            format: int32
            example: 1
        - in: query
          name: year
          schema:
            type: number
            format: int32
            example: 2021
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/CBCustomerIdParam'
      responses:
        '200':
          description: 'returns an invoice object'
          content:
            application/json:
              schema:
                type: object
        '400':
          description: 'unexpected error'
    post:
      tags:
        - CBInvoice
      operationId: createInvoice
      parameters:
        - in: query
          name: month
          schema:
            type: number
            format: int32
            example: 1
        - in: query
          name: year
          schema:
            type: number
            format: int32
            example: 2021
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/CBCustomerIdParam'
      responses:
        '201':
          description: 'invoice object created'
        '400':
          description: ' unexpected error'
  /cb/reports/invoice/summary:
    summary: ' an array of invoice like aggregated totals for a given set of customers for a give month and year'
    get:
      tags:
        - CBReports
      operationId: getCustomerSummary
      parameters:
        - in: query
          name: month
          schema:
            type: number
            format: int32
            example: 01
        - in: query
          name: year
          schema:
            type: number
            format: int32
            example: 2021
        - in: query
          name: quarter
          schema:
            type: number
            format: int32
            example: 2
        - in: query
          name: customerIds
          schema:
            type: array
            items:
                type: string
                example: 'copper12345'
        - in: query
          name: active
          schema:
            type: boolean
            example: true
      responses:
        '200':
          description: 'returns a single results object'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/CBInvoice'
        '400':
          description: 'unexpected error'
  /cb/reports/movements/totals.json:
    summary: 'totals the pre tax, tax and inclusive of tax totals based on parameters'
    get:
      tags:
        - CBReports
      operationId: movementTotals
      parameters:
        - in: query
          name: month
          schema:
            type: number
            format: int32
            example: 1
        - in: query
          name: year
          schema:
            type: number
            format: int32
            example: 2021
        - in: query
          name: quarter
          schema:
            type: number
            format: int32
            example: 2
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/CBCustomerIdParam'
      responses:
        '200':
          description: 'returns a single results object'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/CBReportMovementTotals'
        '400':
          description: 'unexpected error'
  /cb/reports/tasks/totals.json:
    summary: 'totals the pre tax, tax and inclusive of tax totals based on parameters'
    get:
      tags:
        - CBReports
      operationId: taskTotals
      parameters:
        - in: query
          name: month
          schema:
            type: number
            format: int32
            example: 1
        - in: query
          name: year
          schema:
            type: number
            format: int32
            example: 2021
        - in: query
          name: quarter
          schema:
            type: number
            format: int32
            example: 2
        - in: query
          name: type
          schema:
            type: string
            example: 'fulfillemnt'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/CBCustomerIdParam'
      responses:
        '200':
          description: 'returns a single results object'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/CBReportTaskTotals'
        '400':
          description: 'unexpected error'
  /cb/reports/costs/totals.json:
    summary: 'totals the pre tax, tax and inclusive of tax totals based on parameters'
    get:
      tags:
        - CBReports
      operationId: costTotals
      parameters:
        - in: query
          name: month
          schema:
            type: number
            format: int32
            example: 1
        - in: query
          name: year
          schema:
            type: number
            format: int32
            example: 2021
        - in: query
          name: quarter
          schema:
            type: number
            format: int32
            example: 2
        - in: query
          name: type
          schema:
            type: string
            example: 'adhoc'
        - in: query
          name: name
          schema:
            type: string
            example: 'storage'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/CBCustomerIdParam'
      responses:
        '200':
          description: 'returns a single results object'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/CBReportCostTotals'
        '400':
          description: 'unexpected error'
  /cb/tasks:
    summary: 'cb related chargeable tasks'
    get:
      tags:
        - CBTasks
      operationId: getCBTasks 
      parameters: 
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/CBFromDateParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/CBEndDateParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/CBTaskTypeParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/CBEmployeeNameParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/CBCustomerIdParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/offsetParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/limitParam'

      responses:
        '200':
          description: 'get an array of tasks'
          content:
           application/json:
              schema:
                type: array
                items:
                  $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/CBTask'
        '400':
          description: 'unexpected error'
    post:
      tags:
        - CBTasks
      operationId: createTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/CBTask'
      responses:
        '201':
          description: 'returns a copy of the created object'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/CBTask'
        '400':
          description: 'unexpected error'
        '422':
          description: 'body was an array - or invalid'
  /cb/tasks/{taskId}:
    summary: 'get a single task by its unique id'
    parameters:
      - in: path
        name: taskId
        required: true
        schema:
          type: string
          example: '234234sdrwerewrw'    
    get:
      tags:
        - CBTasks
      operationId: getTaskById
      responses:
        '200':
          description: 'a single task if found or nothing if not'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/CBTask'
        '400':
          description: 'unexpected exception'
    put: 
      summary: 'update an existing task'
      tags:
        - CBTasks
      operationId: updateTaskById
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/CBTask'
      responses:
        '200':
          description: 'returns a simple - updated ok'
        '400':
          description: 'unexpected error'    
    delete:
      tags:
        - CBTasks
      summary: 'deletes this task'
      operationId: deleteTask
      responses:
        '200':
          description: 'deletes the task'
        '400': 
          description: 'unexpected error'
  /cb/movements/batch.json:
    summary: 'will process an array of movements up to a max of 300'
    post:
      summary: 'process an array of new movements'
      tags:
        - CBMovements
      operationId: batchCreateMovements
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/CBMovement'
      responses:
        '201':
          description: 'returns a count of created objects'
        '400':
          description: 'unexpected error'
        '422': 
          description: 'body was not an array - or is invalid'
  /cb/movements:
    summary: 'shipping related cb costs. the endDate parameter is there to limit the results. if end date is set this is exclusive not inclusive'
    get:
      tags:
        - CBMovements
      operationId: getCBMovements
      parameters: 
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/CBOrderNumberParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/CBCarrierParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/CBDispatchDateParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/CBOrderDateParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/CBEndDateParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/CBCustomerIdParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/offsetParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/limitParam'
      responses:
        '200':
          description: 'get an array of movements'
          content:
           application/json:
              schema:
                type: array
                items:
                  $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/CBMovement'
          
        '400':
          description: 'unexpected error'
    post:
      summary: 'create a new movement'
      tags:
        - CBMovements
      operationId: createMovement
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/CBMovement'
      responses:
        '201':
          description: 'returns a copy of the created object'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/CBMovement'
        '400':
          description: 'unexpected error'
        '422':
          description: 'body was an array - or invalid'
  
  /cb/movements/{movementId}:
    summary: 'get a single movement by its unique id'
    parameters:
        - in: path
          name: movementId
          required: true
          schema:
            type: string
            example: '234234sdrwerewrw'
    get:
      tags:
        - CBMovements
      operationId: getMovementById
      responses:
        '200':
          description: 'a single movement if found or nothing if not'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/CBMovement'
        '400':
          description: 'unexpected exception'
    put: 
      summary: 'update an existing movement'
      tags:
        - CBMovements
      operationId: updateMovement
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/CBMovement'
      responses:
        '200':
          description: 'returns a simple - updated ok'
        '400':
          description: 'unexpected error'     
    delete:
      summary: 'deletes this movement'
      tags:
        - CBMovements
      operationId: deleteMovement
      responses:
        '200':
          description: 'returns the delete count - should be 1'
        '400':
          description: 'unexpected error'
  /cb/costs:
    summary: 'all other cb related costs'
    get:
      tags:
        - CBCosts
      operationId: getCBCosts
      parameters: 
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/CBCustomerIdParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/CBFromDateParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/CBEndDateParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/CBTaskTypeParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/offsetParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/limitParam'
      responses:
        '200':
          description: 'get an array of costs'
          content:
           application/json:
              schema:
                type: array
                items:
                  $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/CBCost'
        '400':
          description: 'unexpected error'
    post:
      tags:
        - CBCosts
      summary: 'create new costs - pass an array or object'
      operationId: createCost
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/CBCost'
      responses:
        '201':
          description: 'returns a copy of the created object'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/CBCost'
        '400':
          description: 'unexpected error'
  /cb/costs/{costId}:
    summary: 'get a single cost by its unique id'
    parameters:
      - in: path
        name: costId
        required: true
        schema:
          type: string
          example: '234234sdrwerewrw'
    get:
      tags:
        - CBCosts
      operationId: getCostById
      responses:
        '200':
          description: 'a single cost if found or nothing if not'
        '400':
          description: 'unexpected exception'
    put:
      tags:
        - CBCosts    
      summary: 'update all costs that match the provided company name and order number'
      operationId: updateCost
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/CBCost'
      responses:
        '200':
          description: 'returns a copy of the created object'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/CBCost'
        '400':
          description: 'unexpected error'   
    delete:
      tags:
        - CBCosts
      summary: 'deletes this cost'
      operationId: deleteCost
      responses:
        '200':
          description: 'deletes the cost'
        '400': 
          description: 'unexpected error'
  /cb/contracts:
    summary: 'methods to view create or amend copper beech fulfillment contracts'
    get:
      tags:
      - CBContracts
      operationId: getCBContracts
      parameters:
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/CBCustomerNameParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/CBStartDateParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/CBEndDateParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/CBCustomerIdParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/offsetParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/limitParam'
      responses:
        '200':
          description: 'get an array of contracts'
          content:
           application/json:
              schema:
                type: array
                items:
                  $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/CBContract'
        '400': 
          description: 'unpexpected error'
    post:
      summary: create a new contract
      operationId: addContract
      tags:
        - CBContracts
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/CBContract'
      responses:
        '200':
          description: returns a copy of the created object
          content:
            application/json:
             schema:
              $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/CBContract'
        '422':
          description: 'valid object but unable to process. Could be due to a duplicate Id being supplied or the related customer has a contract already or does not exist'
        '400':
          description: 'unepected error'
  /cb/contracts/{contractId}:
    summary: 'get a single contract by its unique id'
    parameters:
      - in: path
        name: contractId
        required: true
        schema:
          type: string
          example: '234234sdrwerewrw'
    get:
      tags:
        - CBContracts
      operationId: getContractById
      responses:
        '200':
          description: 'a single contract if found or nothing if not'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/CBContract'
        '400':
          description: 'unexpected exception'
    put:
      tags:
        - CBContracts
      operationId: updateContract
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/CBContract'               
      responses:
        '200':
          description: returns a copy of the created object
          content:
            application/json:
             schema:
              $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/CBContract'
        '422':
          description: 'valid object but unable to process. Could be due to a duplicate Id being supplied or the related customer has a contract already or does not exist'
        '400':
          description: 'unepected error'      
    delete:
      tags:
        - CBContracts
      summary: 'deletes this contract'
      operationId: deleteContract
      responses:
        '200':
          description: 'deletes the contract'
        '400': 
          description: 'unexpected error'
  /cb/contracts/{contractId}/charges:
    parameters:
      - in: path
        name: contractId
        required: true
        schema:
          type: string
          example: '234234sdrwerewrw'
    summary: 'methods for interacting with individual charge definitions'
    get:
      tags:
        - CBContracts
      summary: 'returns array of all charges'
      operationId: getContractCharges
      responses:
        '200':
          description: 'returns an array of all charges'
          content:
            application/json:
             schema:
              type: array
              items:
                $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/CBChargeItem'
        '400':
          description: 'unexpected error'
    post:
      tags:
        - CBContracts
      summary: "add or update a charge to a given contract"
      operationId: upsertContractCharge
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/CBChargeItem'      
      responses:
        '200':
          description: "just returns ok to indicate change was applied"
        '400':
          description: "unexpected error"
  /cb/contracts/{contractId}/costs:
    parameters:
      - in: path
        name: contractId
        required: true
        schema:
          type: string
          example: '234234sdrwerewrw'
    summary: 'methods for interacting with individual cost definitions'
    get:
      tags:
        - CBContracts
      summary: 'returns array of all costs'
      operationId: getContractCosts
      responses:
        '200':
          description: 'returns an array of all charges'
          content:
            application/json:
             schema:
              type: array
              items:
                $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/CBContractCostItem'
        '400':
          description: 'unexpected error'
    post:
      tags:
        - CBContracts
      summary: "add or update a charge to a given contract"
      operationId: upsertContractCost
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/CBContractCostItem'      
      responses:
        '200':
          description: "just returns ok to indicate change was applied"
        '400':
          description: "unexpected error"
  /cb/contracts/{contractId}/costs/{costId}:
    summary: "methods to work with a specific cost"
    delete:
      tags:
        - CBContracts
      operationId: deleteContractCost
      parameters:
        - in: path
          name: contractId
          required: true
          schema:
            type: string
            example: '234234sdrwerewrw'
        - in: path
          name: costId
          required: true
          schema:
            type: string
            example: 'dsfdsfdsfsd'
      responses:
        '200':
          description: 'deletes the cost definition'
        '400': 
          description: 'unexpected error'
  /cb/contracts/{contractId}/charges/{chargeId}:
    summary: "methods to work with a specific charge"
    delete:
      tags:
        - CBContracts
      operationId: deleteContractCharge
      parameters:
        - in: path
          name: contractId
          required: true
          schema:
            type: string
            example: '234234sdrwerewrw'
        - in: path
          name: chargeId
          required: true
          schema:
            type: string
            example: 'dsfdsfdsfsd'
      responses:
        '200':
          description: 'deletes the charge definition'
        '400': 
          description: 'unexpected error'        
  /cb/customers:
    summary: 'methods related to copper beech fulfillment customers'
    get:
      tags:
        - CBCustomers
      operationId: getCBCustomers
      parameters: 
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/CBCustomerStatusParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/CBCustomerNameParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/CBCustomerIdParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/offsetParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/limitParam'
      responses:
        '200':
          description: 'get an array of cb customers'
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/CBCustomer'
        '400': 
          description: ' unpexpected error'
    post:
      summary: create a new customer
      operationId: addCustomer
      tags:
        - CBCustomers
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/CBCustomer'
      responses:
        '200':
          description: returns a copy of the created object
          content:
            application/json:
             schema:
              $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/CBCustomer'
        '422':
          description: 'valid object but unable to process. Could be due to a duplicate Id being supplied'
        '400':
          description: 'unepected error'
  /cb/customers/{customerId}:
    summary: 'get a single customer by its unique id'
    parameters:
      - in: path
        name: customerId
        required: true
        schema:
          type: string
          example: '234234sdrwerewrw'
    get:
      tags:
        - CBCustomers
      operationId: getCustomerById
      responses:
        '200':
          description: 'a single customer if found or nothing if not'
          content:
            application/json:
              schema:
               $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/CBCustomer'
        '400':
          description: 'unexpected exception'
    put:
      tags:
        - CBCustomers
      summary: 'update an existing cb customer'
      operationId: updateCustomer
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/CBCustomer'       
      responses:
        '200':
          description: 'updated ok'
        '400':
          description: 'unexpected error'
    delete:
      tags:
        - CBCustomers
      summary: 'deletes this customer'
      operationId: deleteCustomer
      responses:
        '200':
          description: 'deletes the customer'
        '400': 
          description: 'unexpected error'
  /reports/draftorder/ranked/centres:
    summary: "list the centres in order of spend month to date"
    get:
      tags:
        - reports
      operationId: getMTDRankedCentres
      parameters:
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/targetDateParam'
      responses:
        '200':
          description: "returns an array of centre names with total amount in spend order"
          content:
            application/json:
              schema:
                type: object
                properties:
                  name: 
                    type: string
                    example: "Bristol"
                  totalAmount:
                    type: number
                    example: 515.34
        '400':
          description: "unexpected error"
        '401':
          description: "unauthorised"
  /reports/draftorder/ytd/totals:
    summary: "get the year to date totals and the previous year's totals to the same period in that previous year. Also returns % increase or decrease"
    parameters:
      - $ref: "https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/draftOrderNameParam"
      - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/draftOrderStatusParam'
      - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/targetDateParam'
      - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/centreTypeParam'
    get:
      tags:
        - reports
      operationId: getYTDTotals
      responses:
        '200':
          description: "returns a summary object"
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/ReportMTDObject'
        '400':
          description: "unexpected error"
        '401':
          description: "unauthorised"
  /reports/draftorder/mtd/totals:
    summary: "get the month to date totals and the previous months totals to the same period in that previous month. Also returns % increase or decrease"
    parameters:
      - $ref: "https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/draftOrderNameParam"
      - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/draftOrderStatusParam'
      - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/targetDateParam'
      - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/centreTypeParam'
    get:
      tags:
        - reports
      operationId: getMTDTotals
      responses:
        '200':
          description: "returns a summary object"
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/ReportMTDObject'
        '400':
          description: "unexpected error"
        '401':
          description: "unauthorised"
  /reports/draftorder/totals:
    get:
      tags:
        - reports
      summary: "returns an object containing a variety of aggregation results"
      operationId: getOrderTotals
      parameters:
        - $ref: "https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/draftOrderNameParam"
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/draftOrderStatusParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/targetDateParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/centreTypeParam'
      responses:
        '200':
          description: "returns a summary object of the total amount and count of orders"
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalAmount:
                    type: number
                    example: 23000.00
                  totalCount:
                    type: integer
                    example: 200
        '400':
          description: "unexpected error"
        '401':
          description: "unauthorised"
  /centres/{centreId}:
    parameters:
      - in: path
        name: centreId
        required: true
        schema:
          type: string
          example: 234234234234
    get:
      tags:
        - centre
        - admin
      operationId: getCentre
      responses:
        '200':
          description: 'returns an object of type centre if found'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/LearningCentre'
        '404':
          description: 'the requested cenre was not found'
        '401':
          description: 'unauthorised'
    post:
      tags:
        - centre
        - admin
      operationId: updateCentre
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/LearningCentre'
      responses:
        '200':
          description: 'returns ok'
        '404':
          description: 'centre not found'
        '401': 
          description: 'unauthorised'
        '400': 
          description: 'unexpected error'
    delete:
      tags:
        - admin
        - centre
      operationId: deleteCentre
      responses:
        '200':
          description: 'returns ok'
        '404':
          description: 'centre not found'
        '401': 
          description: 'unauthorised'
        '400': 
          description: 'unexpected error'
  /centres/shopify/{shopifyId}:
    parameters:
      - in: path
        name: shopifyId
        required: true
        schema:
          type: integer
          example: 123456677
    get:
      tags:
        - centre
      operationId: getCentreByShopifyId
      responses:
        '200':
          description: 'single centre object for unique shopify Id'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/LearningCentre'
        '404':
          description: 'the requested cenre was not found'
        '401':
          description: 'unauthorised'
  /centres:
    parameters:
      - in: query
        name: name
        schema:
          type: string
          example: 'Walton'
      - in: query
        name: size
        schema:
          type: string
          example: 'S'
      - in: query
        name: closed
        schema:
          type: boolean
          example: true
          default: false
    get:
      tags:
        - centre
        - admin
      operationId: getCentres
      responses:
        '200':
          description: returns object if found
          content:
           application/json:
              schema:
                type: array
                items: 
                  $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/LearningCentre'
  /product:
    parameters:
      - in: query
        name: title
        schema:
          type: string
          example: 'Lego'
      - in: query
        name: vendor
        schema:
          type: string
          example: 'tangle'
      - in: query
        name: pointsUnder
        schema:
          type: integer
          example: 200
      - in: query
        name: pointsOver
        schema: 
          type: integer
          example: 50
      - in: query
        name: variantId
        schema:
          type: integer
          example: 123456789
      - in: query
        name: tags
        schema:
          type: string
          example: "tangle"
      - in: query
        name: bold_price
        schema:
          type: number
          example: 12.34
      - in: query 
        name: totalVariantQuantity
        schema:
          type: number
          example: 20
      - in: query
        name: includeDeleted
        schema:
          type: boolean
          example: false
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
    get: 
      operationId: getProducts
      tags:
        - product
      responses:
        '200':
          description: 'paginated array of product details'
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/Product'
        '404':
          description: 'not found'
        '401':
          description: unauthorised
  /product/count:
    parameters:
      - in: query
        name: title
        schema:
          type: string
          example: 'Lego'
      - in: query
        name: vendor
        schema:
          type: string
          example: 'tangle'
      - in: query
        name: pointsUnder
        schema:
          type: integer
          example: 200
      - in: query
        name: pointsOver
        schema: 
          type: integer
          example: 50
      - in: query
        name: variantId
        schema:
          type: integer
          example: 123456789
      - in: query
        name: tags
        schema:
          type: string
          example: "tangle"
      - in: query
        name: bold_price
        schema:
          type: number
          example: 12.34
      - in: query 
        name: totalVariantQuantity
        schema:
          type: number
          example: 20
      - in: query
        name: includeDeleted
        schema:
          type: boolean
          example: false
    get:
      tags:
        - product
      operationId: getProductCount
      responses:
        '200':
          description: 'returns a count of objects matching the request parameters'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 20
        '400':
          description: 'unexpected error'
  /product/{product_id}:
    parameters:
      - in: path
        name: product_id
        required: true
        schema:
          type: number
          example: 123213213333
    get:
      operationId: getProduct
      tags:
        - product
      summary: get the product details including all variant details
      responses:
        '200':
          description: returns a valid complete product
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/Product'
        '401':
          description: unauthorised
        '404':
          description: not found
  /product/variant/{variantId}:
    parameters:
      - in: path
        name: variantId
        required: true
        schema:
          type: integer
          example: 23432432432432
    get:
      tags: 
        - product
      summary: 'returns a single product if a product is found with that variant id'
      operationId: getProductByVariant
      responses:
        '200':
          description: 'returns the first product found containing that variant Id'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/Product'
        '404':
          description: 'no product found'
        '401':
          description: 'unauthorised'
        '400':
          description: 'unexpected error'
  /product/variant/{variantId}/points:
    parameters:
      - in: path
        name: variantId
        required: true
        schema:
          type: integer
          example: 23432432432432
    get:
      tags: 
        - product
      summary: 'returns a single product if a product is found with that variant id'
      operationId: getProductPointsByVariant
      responses:
        '200':
          description: 'returns the first product found containing that variant Id'
          content:
            application/json:
              schema:
                type: integer
                example: 100
        '404':
          description: 'no product found'
        '401':
          description: 'unauthorised'
        '400':
          description: 'unexpected error'
  /invoice/aggregate:
    post:
      operationId: postInvoiceAggregate
      tags:
        - invoice
      summary: "groups the draft orders based on the provided filter and then generates a single invoice to coer the set of draft orders."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "August Medium"
      responses: 
        '201':
          description: "returns the created invoice"
          content:
           application/json:
            schema:
             $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/Invoice'
        '401':
          description: "unauthorised"
        '400':
          description: "unexpected error"
        '404':
          description: "no matching draft orders found"
  /invoice:
    get:
      tags:
        - invoice
      operationId: getInvoices
      parameters:
        - in: query
          name: name
          schema:
            type: string
          example: 'august mid'
      responses:
        '200':
          description: "returns array of matching invoices"
          content:
            application/json:
              schema:
                type: array
                items: 
                    $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/Invoice' 
        '400':
          description: "unepected error"
        '404':
          description: "no invoices found"
        '401':
          description: "unauthorised"
  /invoice/{invoiceId}:
    parameters:
      - in: path
        name: invoiceId
        required: true
        schema:
          type: string
          example: "ewrwe543543534"
    delete:
      operationId: deleteInvoiceById
      tags:
        - invoice
      summary: 'deletes the given invoice'
      responses:
        '200':
          description: 'deleted ok'
        '401':
          description: 'unauthorised'
        '404':
          description: 'invoice not found'
    get:
      operationId: getInvoiceById
      tags:
        - invoice
      summary: "returns the invoice object if found"
      responses:
        '200':
          description: "returns the invoice object if found"
          content:
            application/json:
              schema:
               $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/Invoice' 
        '400':
          description: 'unexpected error'
  /auth/passwordreset.json:
    get:
      summary: 'returns a form but expects a valid token and user id is presented as a parameter'
      tags:
       - user
      operationId: getPasswordResetPage
      parameters:
        - in: query
          name: token
          schema:
            type: string
            example: 'wereawewae23432423adadsasd'
        - in: query
          name: id
          schema:
            type: string
            example: 'asdsad234234ear'
      responses:
        '200':
          description: 'a html page with a form'
          content:
            text/html:
              schema:
                type: string
                example: '<html><body><div> <form> </form></div></body> </html>'
        '400':
          description: 'unexpected error'
    post:
      tags:
        - user
      operationId: passwordReset
      requestBody:
        content:
          application/json:
            schema:
             type: object
      responses:
        '200':
          description: 'password reset successful'
        '400':
          description: 'unexpected error'
  /auth/requestpasswordreset.json:
    post:
      tags:
        - user
      operationId: requestPasswordReset
      requestBody:
        content:
          application/json:
            schema:
             type: object
      responses:
        '200':
          description: 'password reset successful'
        '400':
          description: 'unexpected error'
  /login:
    post:
      
      tags:
        - user
      summary: implement a basic uid and password requestion
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Invalid user
  /webhook/productOnlyRefresh:
    summary: 'this refresh will not refresh metafields but will call shopify to get a new product object to upsert'
    parameters:
      - in: query
        name: hook
        required: true
        schema:
          type: string
          example: 'url/hook/test'
    post:
      operationId: productOnlyRefresh
      security: 
        - ApiKeyAuth: []
        - APIKeyQueryParam: []
      tags: 
        - webhook
      requestBody:
        content:
          application/json:
            schema:
             $ref: '#/components/schemas/RefreshFilter'
      responses:
        '200':
          description: 'trigger a full refresh of product meta and inventory data'
          content:
            application/json:
              schema:
                type: object
                properties:
                  productsUpdated: 
                    type: number
                    example: 1000
  /webhook/productRefresh:
    summary: 'trigger backend process to update all products with refreshed metafields and inventory'
    parameters:
      - in: query
        name: hook
        required: true
        schema:
          type: string
          example: 'url/hook/test'
    post:
      operationId: productRefresh
      security: 
        - ApiKeyAuth: []
        - APIKeyQueryParam: []
      tags: 
        - webhook
      requestBody:
        content:
          application/json:
            schema:
             $ref: '#/components/schemas/RefreshFilter'
      responses:
        '200':
          description: 'trigger a full refresh of product meta and inventory data'
          content:
            application/json:
              schema:
                type: object
                properties:
                  productsUpdated: 
                    type: number
                    example: 1000
  /webhook/updateUserContainerLists:
    summary: trigger a backend process to update all containers. requires second key
    description: Takes a webhook parameter which it will use to provide an update. If the request is accepted return 202 - request accepted. It will also return a coralation id
    parameters:
      - in: query
        name: hook
        required: true
        schema:
          type: string
          example: 'url/hook/test'
    post:
      security: 
        - ApiKeyAuth: []
        - APIKeyQueryParam: []
      tags: 
        - webhook
      operationId: updateUserContainerLists
      summary: updates all users container lists.
      description: This will check the timestamp of the container and will only update related users if the container has been amended since the last time this processes has exectuted. 
      responses:
        '202':
          description: the request has been accepted and with run. 
          content:
            application/json:
              schema:
                type: object
                properties:
                  correlationId:
                    type: string
                    example: correlationid1234  
        '400':
          description: bad request
        '401':
          description: unauthorised
  /container/add:
    post:
      tags:
        - container
      operationId: addContainer
      requestBody:
        content:
          application/json:
            schema:
             $ref: '#/components/schemas/Container'
      responses:
        '201':
          description: container created ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  containerId:
                    type: string
                    example: dsfdsfdsfe324324324324
        '400':
          description: bad request
        '401':
          description: unauthorised
  /container/{containerId}:
    summary: methods to work with a specific container
    parameters:
      - name: containerId
        required: true
        in: path
        description: a valid object id for a container
        schema:
          type: string
          example: er324324324esrewrwer
    get:
      tags:
        - container
      summary: get a container given a path variable of Object Id
      operationId: getContainerById
      responses:
        '200':
          description: the full container if it exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Container'
        '400':
          description: bad request
        '401':
          description: not authorised
        '404':
          description: not found
    post:
      tags:
        - container
      summary: update an existing container.
      description: This api will ensure that any provided ObjectIds are valid
      operationId: updateContainerById
      requestBody:
        content:
          application/json:
            schema:
             $ref: '#/components/schemas/Container'
      responses:
        '200':
          description: Object updated
          content:
            application/json:
              schema:
                type: string
                example: created ok 
        '400':
          description: bad request
        '401':
          description: not authorised
        '404':
          description: not found
    delete:
      tags:
        - container
      summary: delete an order by id
      operationId: deleteContainerById
      responses:
        '200':
          description: Object deleted
        '400':
          description: bad request
        '401':
          description: not authorised
        '404':
          description: not found
  /users/related/{userId}:
    summary: methods for interacting with related users
    get:
      tags:
        - user
      summary: get related users for the provided user id
      operationId: getRelatedUsers
      parameters:
        - name: userId
          required: true
          in: path
          description: the user id for which we want the related users
          schema:
            type: string
            example: dfdsfds324234234fsd33
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: bad request
        '401':
          description: unauthorised
        '404':
          description: not found
  /users:
    summary: represents a user array
    description: this is a way to query and receive a paginated list of users
    get:
      tags:
        - user
      summary: IMPLEMENTED get users by the parameters
      operationId: getUser
      parameters:
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/centre-id-query-parm-required'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/first-name-query-param'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/last-name-query-param'
        - name: pointsOver
          in: query
          required: false
          schema:
            type: number
            example: 25
        - name: pointsUnder
          in: query
          required: false
          schema:
            type: number
            example: 200
        - name: roles
          in: query
          schema:
            type: array
            items: 
              type: string
          style: form
          explode: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: bad request
        '401':
          description: unauthorised
        '404':
          description: not found
    post:
      tags:
        - user
      summary: add users
      description: add users - need to consider how to limit the size of this
      operationId: addUsers
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
        required: true
      responses:
        '200': 
          description: ok but nothing new created
        '201': 
          description: new users were created and their identifiers are in the response
        '400': 
          description: bad request
        '401':
          description: unauthorised
    put:
      tags:
        - user
      summary: update a set of existing users data
      operationId: updateUsers
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
        required: true  
      responses:
        '200':
          description: updated ok
        '201':
          description: 'created new user as no existing users was found'
        '400':
          description: bad request
        '401':
          description: unauthorised
        '404':
          description: not found
        '501':
          description: 'if the request includes Content-* type header attributes that are not implemented it will return 501' 
  /users/newuser:
    post:
      tags:
        - user
      summary: IMPLEMENTED post a single user object
      operationId: addUser
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/User'
        required: true
      responses:
        '201':
          description: created ok
        '400': 
          description: bad request
        '401':
          description: unauthorised
  /users/{userId}:
    summary: represents a user
    description: represents an individual user in the system
    get:
      tags:
        - user
      summary: IMPLEMENTED get a single user by our Id
      operationId: getUserById
      parameters:
        - in: path
          name: userId
          description: either a glr or EL id 
          schema:
            type: string
            example: 'glridexample'
          required: true
        - in: query
          name: IdType
          description: tells the api which user id you are providing
          schema:
            type: string
            enum: 
              - glr
              - el
            default: glr
      responses:
        '200':
          description: returns a single user if found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not Found
    put:
      tags:
        - user
      summary: IMPLEMENTED update the user
      parameters:
        - in: path
          name: userId
          description: either a glr or EL id 
          schema:
            type: string
            example: 'glridexample'
          required: true
        - in: query
          name: IdType
          description: tells the api which user id you are providing
          schema:
            type: string
            enum: 
              - glr
              - el
            default: glr
      operationId: updateUser
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: updated ok
        '201':
          description: created new object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: bad requeat
        '404':
          description: not found
    delete:
      tags:
        - user
      summary: delete a user 
      parameters:
        - in: path
          name: userId
          description: either a glr or EL id 
          schema:
            type: string
            example: 'glridexample'
          required: true
        - in: query
          name: IdType
          description: tells the api which user id you are providing
          schema:
            type: string
            enum: 
              - glr
              - el
            default: glr
      operationId: deleteUser
      responses:
        '200':
          description: deleted ok
        '400': 
          description: bad request
        '401':
          description: unuthorised
  /users/{userId}/creds:
    put:
      tags:
        - user
      summary: set credentials
      operationId: setCredentials
      parameters:
        - in: path
          name: userId
          required: true
          description: a user id
          schema:
            type: string
            example: 'erwe234ewrewr234'
      requestBody:
        description: 'credentials schema'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
        required: true
      responses:
        '200':
          description: 'password updated'
        '400':
          description: ' unexpected error'
  /users/{userId}/favourites:
    get:
      tags:
        - user
      summary: get user favourite rewards
      operationId: getUserFavs
      parameters: 
        - in: path
          name: userId
          required: true
          description: a unique user Id
          schema:
            type: string
            example: sdfdsfdsf324324ewrw
      responses:
        '200':
          description: array of rewards
        '400':
          description: invalid operation
        '404':
          description: not found
    post:
      tags: 
        - user
      summary: create user favourite rewards
      operationId: updateUserFavs
      parameters: 
        - in: path
          name: userId
          required: true
          description: a unique user Id
          schema:
            type: string
            example: sdfdsfdsf324324ewrw
      requestBody:
        description: Enough detail to create a new cabinet
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Favourite'
        required: true
      responses:
        '201':
          description: favourite created
        '400':
          description: invalid operatipon
  /users/{userId}/favourites/{favouriteId}:
    delete:
      tags:
        - user
      summary: remove a favourite from a user
      operationId: removeFav
      parameters: 
        - in: path
          name: userId
          required: true
          description: a unique user Id
          schema:
            type: string
            example: sdfdsfdsf324324ewrw
        - in: path
          name: favouriteId
          required: true
          description: a unique user Id
          schema:
            type: string
            example: sdfdsfdsf324324ewrw
      responses:
        '200':
          description: favourite removed
        '400': 
          description: invalid operation
        '404':
          description: not found
  /store/draftorder/{draftorderid}/inventorycheck.json:
    get:
      operationId: processGetDraftOrderInventory
      summary: 'a process API that returns an array of variant ids enriched with the corresponding inventory_quantity from the shopify product'
      tags:
        - 'draft order'
        - 'process'
      parameters:
        - name: 'draftorderid'
          in: path
          required: true
          description: 'a valid draft order id'
          schema:
            type: string
            example: sdfdsfdsf324324ewrw
      responses:
        '200':
          description: ' an array of objects. the objects contain the product title, the variant in the line and the inventory quantity for that variant'
          content:
            application/json:
              schema:
                type: array
                items: 
                  type: object
        '404':
          description: nothing found
  /store/draftorder:
    get:
      operationId: getDraftOrders
      summary: returns an array of draft orders
      tags:
        - 'draft order'
      parameters:
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/draftOrderFieldsParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/draftOrderNameParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/draftOrderStatusParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/targetDateParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/centreTypeParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/draftOrderNotesParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/shopifyIdParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/centreIdParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/centreNameParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/offsetParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/limitParam'
      responses:
        '200':
          description: ok
          headers:
            x-glr-limit:
              schema:
                type: integer
                example: 5
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref:  '#/components/schemas/DraftOrder'
        '404':
          description: nothing found
    post:
      operationId: addDraftOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DraftOrder'
        description: 'fields to be added or amended'
        required: true
      tags:
        - 'draft order'
      responses:
        '201':
          description: created ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DraftOrder'
        '401':
          description: unauthorised
        '400':
          description: invalid operation
  /store/draftorder/count:
     get:
      operationId: getDraftOrdersCount
      summary: returns an integer count of items that match the query
      tags:
        - 'draft order'
      parameters:
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/draftOrderNameParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/draftOrderStatusParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/targetDateParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/centreTypeParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/draftOrderNotesParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/shopifyIdParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/centreIdParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/centreNameParam'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: integer
                example: 10
        '404':
          description: nothing found
  /store/draftorder/{draft_order_id}:
    parameters:
      - in: path
        required: true
        name: draft_order_id
        schema:
          type: string
          example: '234234ewfsdfdss32'
    get:
      tags:
       - 'draft order'
      operationId: getDraftOrder
      responses:
        '200':
          description: returns the object if found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DraftOrder'
    put:
      operationId: updateDraftOrder
      tags:
        - 'draft order'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DraftOrder'
        description: 'fields to be added or amended'
        required: true
      responses:
        '200':
          description: updated ok
          
        '401':
          description: unauthorised
        '404':
          description: draft order not found
    delete:
      tags: 
        - 'draft order'
      operationId: deleteDraftOrder
      responses:
        '200':
          description: deleted ok
        '401':
          description: unauthorised
        '404':
          description: draft order not found
  /store/draftorder/{draft_order_id}/clone/{centreId}:
    parameters:
      - in: path
        name: draft_order_id
        required: true
        schema:
          type: string
          example: '23423rewrwe32423'
      - in: path
        name: centreId
        required: true
        schema:
          type: string
          example: 'werwer234234erwrewr'
    post:
      tags:
        - 'draft order'
      operationId: cloneDraftOrderForCentre
      responses:
        '200':
          description: returns the new cloned draft order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DraftOrder'
  /store/process/draftorder/{draft_order_id}/refresh:
    post:
      tags:
       - 'draft order'
      operationId: refreshFromShopify
      parameters: 
        - in: path
          name: draft_order_id
          required: true
          schema:
            type: string
            example: 'erwer23423423'
      responses:
        '200':
          description: refreshed ok
        '404':
          description: not found
        '401':
          description: unauthorised
        '400':
          description: unexpected error
  /store/process/draftorder/{draft_order_id}/send:
    parameters:
      - in: path
        name: draft_order_id
        required: true
        schema:
          type: string
          example: 'ewrw23432423rewr234'
    post:
      tags:
        - 'draft order'
      operationId: sendDraftOrder
      responses:
        '200':
          description: 'sends the draft to shopify and changes status to sent'
        '400':
          description: 'unexpected error'
        '404':
          description: 'draft order not found'
  /store/process/draftorder/{draft_order_id}/complete:
    parameters:
      - in: path
        name: draft_order_id
        required: true
        schema:
          type: string
          example: 'ewrw23432423rewr234'
    post:
      tags:
        - 'draft order'
      operationId: completeDraftOrder
      responses:
        '200':
          description: 'complete the draft order in shopify and change status to complete'
        '400':
          description: 'unexpected error'
        '404':
          description: 'draft order not found'
  /store/process/order/{orderId}:
    delete:
      operationId: processDeleteOrder
      tags:
        - store
        - processOrder
      summary: Process API to delete an order but only if it can safely restock cabinet and refund member reward points
      parameters:
        - in: path
          name: orderId
          required: true
          description: a valid order Id
          schema:
            type: string
            example: 2332432rewrewrewr
      responses:
        '200':
          description: ok
        '400':
          description: invalid operation
  /store/order:
    get:
      operationId: getOrderList
      tags:
        - store
      summary: get a list of all orders
      description: >-
        returns an array of all orders that meet the parameters THAT NEED TO BE
        DEFINED!
      parameters:
        - in: query
          name: centreId
          required: false
          description: the centre we want the orders for.
          schema:
            type: string
            example: 5ce3c2d80e67a54e8fbefe74
        - in: query
          name: fromDate
          description: >-
            the from which we want to retrieve forward a particular schools
            orders. example 2019-10-01
          schema:
            type: string
            format: date
        - in: query
          name: fulfillStatus
          schema:
            type: string
            example: 'unfilfilled'
        - in: query
          name: userId
          schema:
            type: string
            example: '234324344433334234wer'
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: OK
          content:
             application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
    put:
      tags:
        - store
      summary: Update an existing Order (assuming the order is held in mongo and not in
        shopify)
      operationId: updateOrder
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
        '405':
          description: Validation exception
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        description: Order object that needs to be added to the store
        required: true
    post:
      tags:
        - store
      summary: add a new order
      description: >-
        Add a new order. We need to think about how this is called. an order
        only needs to be created if one does not already exist but there is a
        chance that two students could call this in some sort of race condition.
      parameters:
        - in: header
          name: userid
          required: true
          schema:
            type: string
            example: '32432jkhlk3249e'
        - in: header
          name: centreid
          required: true
          schema:
            type: string
            example: '3242dssewrwer3e'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid Order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        description: create a new order
        required: true
  /store/order/count:
    get:
      tags:
        - store
      summary: returns a count of orders
      description: "get a count of orders based on the passed parameters"
      operationId: getOrderCount
      parameters: 
        - in: query
          name: centreId
          required: true
          description: the centre we want the orders for.
          schema:
            type: string
            example: 5ce3c2d80e67a54e8fbefe74
        - in: query
          name: fromDate
          description: >-
            the from which we want to retrieve forward a particular schools
            orders. example 2019-10-01
          schema:
            type: string
            format: date
        - in: query
          name: fulfillStatus
          schema:
            type: string
            example: 'unfilfilled'
        - in: query
          name: userId
          schema:
            type: string
            example: '23423432gsg324234'
      responses:
        '200':
          description: 'count returned in body'
          content:
             application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 10
  /store/order/{orderId}/{lineItemId}:
    get:
      tags:
        - store
      summary: Find lineItem by Id.
      description: "get a single lineItem by Id from the parent Order"
      operationId: getLineItemById
      parameters:
        - name: orderId
          in: path
          description: ID of order to return. 
          example: 5cfe314591ae1d279a6961a1
          required: true
          schema:
            type: string
        - name: lineItemId
          in: path
          description: ID of lineItem to reurn 
          example: 5cfe314591ae1d279a6961a1
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LineItem'
        '400':
          description: Invalid IDs supplied
        '404':
          description: Order not found or LineItem not found
    put:
      tags: 
        - store
      summary: update the given  lineitem with the values in the body
      operationId: updateLineItem
      parameters: 
        - in: path
          name: orderId
          required: true
          description: the parent order id
          schema:
            type: string
        - in: path
          name: lineItemId
          required: true
          description: the related lineitem
          schema:
            type: string
      requestBody:
        description: an array of lineItems
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LineItem'
      responses:
        '200':
          description: ok
        '404': 
          description: not found
        '400': 
          description: processing error
    delete:
      tags:
        - store
      summary: delete the line by given id
      operationId: deleteLine
      parameters: 
        - in: path
          name: orderId
          required: true
          description: unique id for order
          schema:
            type: string
        - in: path
          name: lineItemId
          required: true
          description: unique id for line in given order
          schema:
            type: string
      responses:
        '200':
          description: ok
        '400':
          description: invalid operation
  /store/order/{orderId}:
    get:
      tags:
        - store
      operationId: getOrderById
      summary: 'return an order using its unique Id'
      parameters:
        - in: path
          name: orderId
          required: true
          description: 'the unique id'
          schema:
            type: string
            example: "324234ewrewrew34"
      responses:
        '200':
          description: 'request completed ok' 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order' 
        '400':
          description: 'unexpected exception'
    post:
      tags: 
        - store
      operationId: addLines
      summary: 'add an array of lines to a specific existing order. Not the same as the process api that takes the centreid and creates the order along with the line item. This is a simple system api call that will add a valid line to an existing order. As with the other paths there is little validation of data at this point.'
      parameters:
        - in: path
          name: orderId
          required: true
          description: the parent order id
          schema:
            type: string
      requestBody:
        description: this is the list of line items that need to be removed from the order
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/LineItem'
      responses:
        '201':
          description: added lines ok. returns array of lineItem Ids that have been created.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '404': 
          description: Order not found
        '400': 
          description: invalid operaation
    put:
      tags:
        - store
      operationId: adminOrderUpdate
      parameters:
        - in: path
          name: orderId
          required: true
          description: the parent order id
          schema:
            type: string
      requestBody:
        description: this will accept a valid order object but only a limited set of attributes can be updated.
        content:
          application/json:
            schema:
             $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Update completed ok. returns related order object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          description: unauthorised
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: delete the order if it exists, by Id
      operationId: deleteOrder
      parameters:
        - in: path
          name: orderId
          required: true
          description: the unique ID for the order
          schema:
            type: string
      responses:
        '200':
          description: ok
        '400':
          description: invalid operation
  /store/order/LineItem:
    get:
      tags:
        - store
      summary: get a lines various parameters
      operationId: findLines
      parameters:
        - in: query
          name: orderId
          required: true
          description: the parent order
          schema:
            type: string
        - in: query
          name: productTitle
          required: false
          description: string that is contained within a product title
          schema:
            type: string
        - in: query
          name: lastName
          description: exact last name to be used in search
          required: false
          schema:
            type: string
        - in: query
          name: firstName
          description: exact first name to be used in search
          required: false
          schema:
            type: string  
        - in: query
          name: variantId
          description: object id of the variant
          required: false
          schema:
            type: string
        - in: query
          name: studentId
          description: object id of the related student document
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LineItem'
        '400':
          description: Invalid params supplied
        '404':
          description: Order not found or LineItem not found
  /store/order/getCurrentForCentre:
    get:
      tags:
        - store
      summary: get the Current Open Order for a school if one exists
      operationId: getCurrentForCentre
      parameters:
        - in: query
          name: centreId
          required: true
          description: the centre we want the orders for. Example 5ce3c2d80e67a54e8fbefe74
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LineItem'
  /store/order/deleteItems:
    put:
      tags: 
        - store
      summary: deletes the items but also updates cabinet and user data to restock lizard points and cabinet shelves. A process api that SHOULD be using system apis
      operationId: deleteItems
      parameters:
        - in: header
          name: centreid
          required: true
          schema:
            type: string
            example: '234244srewewwewer4'
        - in: header
          name: userid
          required: true
          schema:
            type: string
            example: 'fdfsdfsfsddfsdf32432'
      requestBody:
        description: this is the list of line items that need to be removed from the order
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/LineItem'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                example: 'successful operation'
        '400':
          description: bad operation.
  /store/order/getMyItems:
    get:
      tags:
        - store
      summary: get a members order items
      operationId: getMyItems
      parameters:
        - in: query
          name: centreId
          required: true
          description: centre identifier
          schema:
            type: string
        - in: query
          name: userId
          required: true
          description: user Identifier
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LineItem'
  /cart/findByMemberId:
    get:
      tags:
        - cart
      summary: get the list of line items for this student.
      description: >-
        get the list of line items for this student from the current cart that
        belong to this student if any exist
      operationId: findByStudentId
      parameters: 
        - in: query
          name: studentId
          required: true
          description: the student we want the lineitems for. Example *5ce65f0f0e67a54e8fbefe77*
          schema:
            type: string
            example: 5d0933b37f0d711285cb515d
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LineItem'
        '400':
          description: >-
            No current underlying order was found so no lineitems were found
            either
        '404':
          description: No lineitems found
  /cart:
    post:
      tags:
        - cart
      summary: Save these line items into a centre order.
      description: >-
        If there is a current order these items are added to it for the student.
        If not a new order is created for the school and these line items are
        added. We also validate that the student has enough points (would be
        good if that was also applied at GUI) and we deduct this from the
        students total. The updated values will be contained in the response
        object
      operationId: createNewCart
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid lineItems
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  $ref: '#/components/schemas/User'
                lineItems:
                  type: array
                  items:
                    $ref: '#/components/schemas/LineItem'
        description: the current user AND an array of line items to be added to a school
          order
        required: true
    put:
      tags:
        - cart
      summary: update line items
      description: amend the items of mine that belong to an open school order
      operationId: updateCart
      responses:
        '200':
          description: OK
  /cabinet/{cabinetId}/reward:
    get:
      tags: 
        - cabinet
      summary: get an array of rewards from a given cabinet
      operationId: getRewards
      parameters: 
        - in: path
          name: cabinetId
          required: true
          schema:
            type: string
            example: asfdsadsad3q32423
        - in: query
          name: title
          schema:
            type: string
            example: 'match attax'
        - in: query
          name: vendor
          schema:
            type: string
            example: 'click'
        - in: query
          name: pointsUnder
          schema:
            type: integer
            example: 100
        - in: query
          name: pointsOver
          schema:
            type: integer
            example: 50
        - in: query
          name: countUnder
          schema:
            type: integer
            example:
        - in: query
          name: countOver
          schema:
            type: integer
      responses:
        '200':
          description: returned array of rewards 
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/Reward'
        '404': 
          description: not found
        '400':
          description: invalid operation
  /cabinet/{cabinetId}/reward/{rewardId}:
    parameters:
        - in: path
          name: cabinetId
          required: true
          schema:
            type: string
            example: werwerdsgsfbd34324q2
        - in: path
          name: rewardId
          required: true
          schema:
            type: string
            example: dkfjdsfjdsl324r5325
    get:
      tags:
        - cabinet
      summary: get related to a specific reward and the underlying product
      operationId: getReward
      description: This method gets all related data for a given reward and this will include shopify formatted data.
      responses:
        '200':
          description: returns as much detail as possible including all nested docs
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/Reward'
        '404':
          description: not found
    post:
      operationId: updateReward
      tags:
        - cabinet
      summary: update the given reward if it exists. Can only update count
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/Reward'
      responses:
        '200':
          description: reward updted
        '204':
          description: nothing changed
        '500':
          description: unexpected exception
  /reward/type:
    get:
      tags:
        - admin
        - cabinet
      summary: get the basic definition of all reward types in the system
      operationId: getRewardTypes
      description: >-
        Initially this is likely to be a very simple set of data but could grow
        as we work out what features for each reward type we need to expose for
        users to maintain.
      parameters:
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/offsetParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/limitParam'
      responses:
        '200':
          description: a simple list of reward types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/RewardType'
                example:
                  - id: 45430584509435098435093jiojojojji
                    name: GLR Shop
                    description: >-
                      This defines the rules for the GLR shop rewards that are
                      available to a given school
                  - id: gfdgdfgdfgfdgdfd346345gdfhdhf
                    name: School Physical Reward
                    description: >-
                      These are physical rewards that are handed out at school
                      but not sourced from GLR Shop directly
                  - id: poertierpotirepoteri4543534
                    name: Reward Cards
                    description: ewdfdfsdfdsfdfs
                  - id: ertirepotireiop43543534
                    name: School Virtual Reward
                    description: rgjfdlkgjdflkjerlkert
        '401':
          description: Not authorised
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No API key found in request
                    default: No API key found in request
        '404':
          description: returned by the kong gateway if the route provided cannot be found
        '502':
          description: bad gateway - issue with gateway talking to upstream service.
    post:
      tags:
        - cabinet
        - admin
      summary: Add a new reward type. only accessible to GLR admins
      operationId: addRewardType
      requestBody:
        description: Enough detail to create a new type
        content:
          application/json:
            schema:
              $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/RewardType'
        required: true
      responses:
        '201':
          description: Reward Created
          content:
            application/json:
             schema:
                $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/RewardType'
        '400':
          description: Invalid Object
        '401':
          description: Unauthorised
    put:
      tags:
        - cabinet
        - admin
      summary: update a new reward type. only accessible to GLR admins. 
      operationId: updateRewardType
      requestBody:
        description: Must provide a valid ID
        content:
          application/json:
            schema:
              $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/RewardType'
        required: true
      responses:
        '200':
          description: Reward updated
          content:
            application/json:
             schema:
                $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/RewardType'
        '400':
          description: Invalid Object
        '401':
          description: Unauthorised
    delete:
      tags:
        - cabinet
        - admin
      summary: delete a reward type
      operationId: deleteType
      parameters:
        - in: query
          name: typeIds
          required: true
          schema:
            type: array
            items:
              type: string
            example: 
               - 'wqerewrewrwerwerwerr'
               - 'dsfdsfsdfdsfdsfdf'
      responses:
        '200':
          description: Item Deleted
        '401':
          description: Unauthorised
        '404':
          description: Not found
  /reward/template:
    get:
      tags:
        - admin
        - cabinet
      operationId: getTemplates
      summary: use this to get the active reward templates for a learning centre
      description: >-
        As each learning centre can create decide which types and templates it
        wishes to use this route can be used to return any or all of the reward
        types based on a simple name or value search
      parameters:
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/offsetParam'
        - $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/parameters/limitParam'
        - in: query
          name: pointsAbove
          required: false
          schema:
            type: integer
            example: 100
          description: search for items with a point value above this ammount
        - in: query
          name: pointsBelow
          required: false
          schema:
            type: integer
            example: 1000
          description: search for items with a point value below this ammount
        - in: query
          name: name
          required: false
          schema:
            type: string
            example: amazon
          description: >-
            a case insensitve string that will be used to search reward template
            names
      responses:
        '200':
          description: a simple list of reward templates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/RewardTemplate'
        '401':
          description: Not authorised
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No API key found in request
                    default: No API key found in request
        '404':
          description: returned by the kong gateway if the route provided cannot be found
        '502':
          description: bad gateway - issue with gateway talking to upstream service.
    post:
      tags:
        - admin
        - cabinet
      summary: create a new reward template
      operationId: addTemplate
      requestBody:
        description: A reward template object
        required: true
        content:
          application/json:
            schema:
              $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/RewardTemplate'
      responses:
        '201':
          description: >-
            Created response. Will include the full definition including the
            newly created Id.
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/RewardTemplate'
        '401':
          description: Unauthorised
        '400':
          description: Bad Request
    put:
      tags:
        - admin
        - cabinet
      summary: update a reward template
      operationId: updateTemplate
      requestBody:
        description: A reward template object including the id that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/RewardTemplate'
      responses:
        '200':
          description: Accepted. Response Will include the full definition.
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/RewardTemplate'
        '401':
          description: Unauthorised
        '404':
          description: Not found  
    delete:
      tags:
        - admin
        - cabinet
      summary: delete templete
      operationId: deleteTemplate
      parameters:
        - in: query
          name: templateId
          required: true
          schema:
            type: array
            items:
              type: string
              example:
                - 'sdfdsfsdfdsfdsf'
                - 'sdfdsfdsfsdfdsf'
      responses:
        '200':
          description: Item deleted
        '400':
          description: Bad Request
        '401':
          description: Unauthorised
  /reward/issuer:
    summary: Organisation that issues the rewards
  /cabinet:
    summary: this route provides EL centric operations for interacting with rewards
    description: A cabinet is owned by a learning centre.
    get:
      tags:
        - cabinet
      operationId: getCabinet
      parameters:
        - in: query
          name: centre
          schema:
            type: string
            example: '5e8e67ed1c9d440000858579'
        - in: query
          name: summary
          schema:
            type: boolean
            example: false
      responses:
        '200':
          description: OK - cabinet found
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/Cabinet'
        '401':
          description: >-
            Only peole associated with the centre can view the centres cabinet.
            Admins can also view a cabinet for any centre.
        '404':
          description: Not Found - No Cabinet found for the learning centre
    post:
      tags:
        - cabinet
        - admin
      operationId: addCabinet
      summary: Create a new Cabinet for a learning centre. 
      description: This will only permit one active cabinet. Delete an existing cabinet if you wish to replace one.
      requestBody:
        description: Enough detail to create a new cabinet
        content:
          application/json:
            schema:
              $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/Cabinet'
        required: true
      responses:
        '201':
          description: Cabinet Created
          content:
            application/json:
             schema:
                $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/Cabinet'
        '400':
          description: Invalid Object
        '401':
          description: Unauthorised
    put:
      tags:
        - cabinet
      summary: update a cabinet definition
      operationId: updateCabinet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/Cabinet'          
      responses:
        '200':
          description: Cabinet Updated
          content:
            application/json:
             schema:
                $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/Cabinet'
        '400':
          description: Invalid Object 
        '401':
          description: Unauthorised 
    delete:
      tags:
        - cabinet        
      summary: delete a cabinet definition. 
      description: Will also delete related shelves. THIS CANNOT BE UNDONE!
      operationId: deleteCabinet
      parameters: 
        - in: query
          name: cabinetId
          required: true
          schema:
            type: string
            example: 'EL_CAB123'
      responses:
        '200':
          description: Deleted
        '401':
          description: Unauthorised
        '404':
          description: Not found
  /cabinet/shelf:
    summary: "get shelf data"
    get:
      tags:
        - cabinet
      operationId: getShelfByName
      parameters:
        - name: cabinetId
          in: query
          description: ID of cabinet for which we want the shelves.
          required: true
          schema:
            type: string
            example: 'EL_CAB_1234'
        - name: name
          in: query
          description: used to search the shelves names for anything containing the provided value
          schema:
            type: string
            example: '200 Shelf'
      responses:
        '200':
          description: shelves were found and returned for the cabinet
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/Shelf'
        '404':
          description: no shelves were found for the cabinet or with the parameters provided
        '401':
          description: Not authorised
  /cabinet/{cabinetId}/shelf/{shelfId}:
    summary: this route provides EL centric operations for interacting with rewards
    description: a shelf is a set of items that have the same lizard points values.
    get: 
      tags:
        - cabinet
      operationId: getShelf
      parameters:
        - name: cabinetId
          in: path
          description: ID of cabinet for which we want the shelves.
          required: true
          schema:
            type: string
            example: 'EL_CAB_1234'
        - name: shelfId
          in: path
          required: true
          description: the unique ID for a specific Cabinet shelf
          schema: 
            type: string
            example: '4324dgdfgdfgdfggdfg3'
      responses:
        '200':
          description: shelves were found and returned for the cabinet
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/Shelf'
        '404':
          description: no shelves were found for the cabinet or with the parameters provided
        '401':
          description: Not authorised
    post:
      tags:
        - cabinet
      operationId: updateShelf
      parameters:
        - name: cabinetId
          in: path
          description: ID of cabinet for which we want the shelves.
          required: true
          schema:
            type: string
            example: 'EL_CAB_1234'
        - name: shelfId
          in: path
          required: true
          description: the unique ID for a specific Cabinet shelf
          schema: 
            type: string
            example: '4324dgdfgdfgdfggdfg3'
      requestBody:
        description: Enough detail to create a new shelf
        content:
          application/json:
            schema:
              $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/Shelf'
        required: true
      
      responses:
        '200':
          description: shelf updated
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/Shelf'
        '204':
          description: nothing changed
        '500':
          description: unexpected exception
    delete:
      tags:
        - cabinet    
      operationId: deleteShelf
      parameters:
        - name: cabinetId
          in: path
          description: ID of cabinet for which we want the shelves.
          required: true
          schema:
            type: string
            example: 'EL_CAB_1234'
        - name: shelfId
          in: path
          required: true
          description: the unique ID for a specific Cabinet shelf
          schema: 
            type: string
            example: '4324dgdfgdfgdfggdfg3'
      responses:
        '200':
          description: item deleted
        '404': 
          description: item not found
        '500':
          description: unexpected error
    
  /cabinet/{cabinetId}/shelf/{shelfId}/reward/add:
    summary: add rewards to a given shelf
    description: this will add rewards but will NOT check if the reward is unique. The same items could therefore be added to different shelves. It Will check that the name is unique within the given shelf.
    parameters:
      - in: path
        name: cabinetId
        required: true
        schema:
          type: string
          example: sdfdsfdsf234234324
      - in: path
        name: shelfId
        required: true
        schema:
          type: string
          example: fsdfsdfewsdfssdfsfsdf
    post:
      operationId: addRewardsToShelf
      tags:
        - cabinet
      requestBody:
        description: array of rewards
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/Reward'
        required: true
      responses:
        '201':
          description: rewards added
        '406':
          description: not acceptable - likely trying to add reward of same name as existing reward on the specified shelf.
  /cabinet/{cabinetId}/shelf/{shelfId}/reward/{rewardId}:
    summary: methods for working with rewards on specific shelves
    parameters:
      - in: path
        name: cabinetId
        required: true
        schema:
          type: string
          example: sdfdsfdsf234234324
      - in: path
        name: shelfId
        required: true
        schema:
          type: string
          example: fsdfsdfewsdfssdfsfsdf
      - in: path
        name: rewardId
        required: true
        schema:
          type: string
          example: vbnvbnvbn567567ghfhfg
    post:
      operationId: updateRewardByShelf
      tags:
        - cabinet
      summary: update the given reward if it exists. Can only update count
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/Reward'
      responses:
        '200':
          description: reward updted
        '204':
          description: nothing changed
        '500':
          description: unexpected exception
    delete:
      operationId: deleteReward
      tags:
        - cabinet
      summary: delete the reward from the shelf if it exists
      responses:
        '200':
          description: reward deleted
        '401':
          description: not authorised
        '404':
          description: not found 
  /issuer:
    get:
      tags:
        - issuer
      operationId: getIssuerByName
      parameters:
        - in: query
          name: name
          schema:
            type: string
            example: 'Great Little Rewards'
          required: true
      responses:
        '200':
          description: 'issuer object'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/Issuer'
        '401':
          description: 'not authorised'
        '404':
          description: 'not found' 
        '400':
          description: 'unexpected error'
      
components:
  securitySchemes:
      ApiKeyAuth:        # arbitrary name for the security scheme
       type: apiKey
       in: header       # can be "header", "query" or "cookie"
       name: X-API-KEY  # name of the header, query parameter or cookie
      APIKeyQueryParam:
        type: apiKey
        in: query
        name: wh_key
  parameters:
    X-EL-CENTRE-ID:
      in: header
      name: X-EL-CENTRE-ID
      required: true
      schema:
        type: string
        example: EL-12234
    X-Consumer-Username:
      in: header
      name: X-Consumer-Username
      required: true
      schema:
        type: string
        example: GLR4S-ADMINS-DEV
      description: Contains the username from Kong Gateway
    offsetParam:
      in: query
      name: offset
      required: false
      schema:
        type: integer
        minimum: 0
      description: The number of items to skip before starting to collect the result set.
    limitParam:
      in: query
      name: limit
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 50
        default: 20
      description: The numbers of items to return.
    cabinetId:
      in: query
      name: cabinetId
      required: true
      schema:
        type: string
        example: 'EL_CAB_1234'
  schemas:
  #experience api schemas
    Menu:
      type: object
      required: 
        - name
      properties:
        name:
          type: string
          example: Toys & Games
        link: 
          type: string
          format: uri
          example: /collections/toys-and-games
        menuItems:
          type: array
          items:
            $ref: '#/components/schemas/Menu'
          example:
            - name: Pocket Money Toys
              link: /collections/pocket-money-toys
    Container:
      type: object
      description: A collection of members 
      properties:
        _id:
          type: string
          example: e3242erewrrewwer
        name:
          type: string
          example: tutor group test
        code:
          type: string
          example: TTG1
        type:
          type: string
          example: tutor group
        _learningCentreId:
          type: string
          example: ssssssssssssaaaaa
        ownerName: 
          type: string
          example: Joe Bloggs
        owners:
          type: array
          items: 
            type: string
            example: ['sdfdsfdsfdsdsfdfsdd','werewrewrewrwererw']
        members:
          type: array
          items:
            type: string
            example: ['ewrewr32432432424', 'as34324234234324']
  #process and system api schemas
    DraftOrder:
      properties:
        _id: 
          type: string
          example: 'weerewr3454354353'
        targetDate: 
          type: string
          format: date-time
        status: 
          type: string 
          enum: 
            - 'draft'
            - 'expired'
            - 'open'
            - 'sent'
            - 'cloned'
            - 'completed'
        name:
          type: string
          example: 'test template'
        note: 
          type: string
          example: 'example note'
        totalPoints: 
          type: integer
          example: 2000
        maxTotal: 
          type: number
          example: 200.00
        centreType: 
          type: string
          enum:
            - 'small'
            - 'medium'
            - 'large'
        _linkedCabinetId:
          type: string
          example: '213123iorewqrr'
        _learningCentreId:
          type: string
          example: 'asdfds3rewrewrwe'
        learningCentre:
            $ref: 'https://api.swaggerhub.com/domains/Copper-Beech/GLRCommon/1.0.1#/components/schemas/LearningCentre'
        shopifyDraftOrder: 
          type: object
    Order:
      properties:
        _id:
          type: string
          example: 5cfe314591ae1d279a6961a1
        finStatus:
          type: string
          enum:
            - paid
            - unpaid
            - invoiced
          example: unpaid
        fulfillStatus:
          type: string
          enum:
            - fulfilled
            - unfulfilled
            - fulfilling
          example: fulfilled
        _learningCentrelId:
          type: string
          example: 5ce3c2d80e67a54e8fbefe74
        lineItems:
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
        orderTotal:
          type: number
          example: 500.01
        taxTotal:
          type: number
          example: 100.01
        dateReceived:
          type: string
          format: date
        dateUpdated:
          type: string
          format: date
        dateFulfilled:
          type: string
          format: date
        img:
          type: string
          format: url
          example: 'https://cdn.shopify.com/s/files/1/0039/1633/3123/products/RBAS.jpg?v=1551869506'
    LineItem:
      properties:
        _id:
          type: string
          example: 5cfe314591ae1d279a6961a3
        _rewardId:
          description: this holds a shopify GUID
          type: string
          example: '5e9861217c36460bb0137d7a'
        productTitle:
          type: string
          example: '''Bananas for Books'' Bookmarks - 36 Bookmarks'
        variantId:
          description: 'this is the critical attribute we allways purchase a variant even if it is the default variant.'
          type: string
          example: 'gid://shopify/ProductVariant/18919054671939'
        quantity:
          type: number
          example: 1
        glrpoints:
          type: number
          example: 400
        student:
          description: this should be studentId but a refactor is need to fix
          type: string
          example: 5ce65f0f0e67a54e8fbefe77
        memberFirstName:
          type: string
          example: 'John'
        memberLastName:
          type: string
          example: 'Smith'
    User:
      properties:
        Id:
          type: string
          example: 5cd1b33cf37e6d3f87b178ed
        password:
          type: string
          format: password
        ELId:
          type: string
          example: 'elidexample'
        firstName:
          type: string
          example: Sarah
        lastName:
          type: string
          example: Smith
        userName:
          type: string
          example: ssmith
        currentPoints:
          type: number
          example: 200
        centreId:
          type: string
          example: 5e8e67ed1c9d440000858579
        favourites:
          type: array
          items:
            $ref: '#/components/schemas/Favourite'
    Favourite:
      properties:
        _id:
          type: string
          example: wqewqreqwe342423423134
        _shopifyProductId:
          type: string
          example: asdsadsadsadsd
    Credentials:
      type: object
      description: 'used to update pwd etc'
      properties:
        oldPwd:
          type: string
          format: password
        newPwd:
          type: string
          format: password
        confirmPwd: 
          type: string
          format: password
  #webhook filters
    RefreshFilter:
      type: object
      description: used to limit the refresh of shopify prodcuts
      properties:
        points:
          type: integer
          example: 25
        product_type: 
          type: string
          example: 'Toys and Games'
        updated_at:
          type: string
          format: date
          example: '2021-08-03'
          
  
security:
  - ApiKeyAuth: []
# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/Copper-Beech/GLR4Explore/2.6.5
  - description: using api gateway
    url: http://glr-kong-tst.herokuapp.com/glr/api/glr4s/tst